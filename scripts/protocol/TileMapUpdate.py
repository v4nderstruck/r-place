# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TileMapUpdate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TileMapUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTileMapUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TileMapUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TileMapUpdate
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TileMapUpdate
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TileMapUpdate
    def Tiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # TileMapUpdate
    def TilesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # TileMapUpdate
    def TilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TileMapUpdate
    def TilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def TileMapUpdateStart(builder):
    builder.StartObject(3)

def Start(builder):
    TileMapUpdateStart(builder)

def TileMapUpdateAddX(builder, x):
    builder.PrependInt32Slot(0, x, 0)

def AddX(builder, x):
    TileMapUpdateAddX(builder, x)

def TileMapUpdateAddY(builder, y):
    builder.PrependInt32Slot(1, y, 0)

def AddY(builder, y):
    TileMapUpdateAddY(builder, y)

def TileMapUpdateAddTiles(builder, tiles):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tiles), 0)

def AddTiles(builder, tiles):
    TileMapUpdateAddTiles(builder, tiles)

def TileMapUpdateStartTilesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartTilesVector(builder, numElems: int) -> int:
    return TileMapUpdateStartTilesVector(builder, numElems)

def TileMapUpdateEnd(builder):
    return builder.EndObject()

def End(builder):
    return TileMapUpdateEnd(builder)
