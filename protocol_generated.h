// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace protocol {

struct TileMapUpdate;
struct TileMapUpdateBuilder;

struct TileMapUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TileMapUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_TILES = 8
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *tiles() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_TILES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           VerifyOffset(verifier, VT_TILES) &&
           verifier.VerifyVector(tiles()) &&
           verifier.EndTable();
  }
};

struct TileMapUpdateBuilder {
  typedef TileMapUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(TileMapUpdate::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(TileMapUpdate::VT_Y, y, 0);
  }
  void add_tiles(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> tiles) {
    fbb_.AddOffset(TileMapUpdate::VT_TILES, tiles);
  }
  explicit TileMapUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TileMapUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TileMapUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TileMapUpdate> CreateTileMapUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> tiles = 0) {
  TileMapUpdateBuilder builder_(_fbb);
  builder_.add_tiles(tiles);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TileMapUpdate> CreateTileMapUpdateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    const std::vector<uint8_t> *tiles = nullptr) {
  auto tiles__ = tiles ? _fbb.CreateVector<uint8_t>(*tiles) : 0;
  return protocol::CreateTileMapUpdate(
      _fbb,
      x,
      y,
      tiles__);
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
